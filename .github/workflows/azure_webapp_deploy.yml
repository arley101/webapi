name: Deploy Python App to Azure App Service - EliteDynamicsAPI (v3-Robust-Cache-Buster)

on:
  push:
    branches: [production]
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

env:
  AZURE_WEBAPP_NAME: elitedynamicsapi
  PYTHON_VERSION: '3.11'
  AZURE_RESOURCE_GROUP: 'Memorycognitiva'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Azure Login
      uses: azure/login@v2
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    # --- NUCLEAR CACHE CLEANING APPROACH ---
    - name: Nuclear Cache Clearing - Phase 1
      run: |
        echo "üî• PHASE 1: Clearing ALL Oryx artifacts..."
        
        # Obtener credenciales de publishing
        PUBLISH_CREDS=$(az webapp deployment list-publishing-credentials \
          --name ${{ env.AZURE_WEBAPP_NAME }} \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }})
        
        PUBLISH_USER=$(echo $PUBLISH_CREDS | jq -r '.publishingUserName')
        PUBLISH_PASS=$(echo $PUBLISH_CREDS | jq -r '.publishingPassword')
        
        # Eliminar oryx-manifest.toml forzadamente
        curl -X DELETE "https://${{ env.AZURE_WEBAPP_NAME }}.scm.azurewebsites.net/api/vfs/site/wwwroot/oryx-manifest.toml" \
          -u "$PUBLISH_USER:$PUBLISH_PASS" || echo "Manifest file not found (OK)"
        
        # Eliminar directorios de cach√© de Oryx
        curl -X DELETE "https://${{ env.AZURE_WEBAPP_NAME }}.scm.azurewebsites.net/api/vfs/tmp/oryx/" \
          -u "$PUBLISH_USER:$PUBLISH_PASS" || echo "Oryx cache not found (OK)"
        
        echo "‚úÖ Phase 1 completed"

    - name: Nuclear Cache Clearing - Phase 2  
      run: |
        echo "üî• PHASE 2: App Service restart and settings..."
        
        # Configurar variables que fuerzan rebuild completo
        az webapp config appsettings set \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --name ${{ env.AZURE_WEBAPP_NAME }} \
          --settings \
            "DEPLOYMENT_TIMESTAMP=$(date +%s)" \
            "SCM_BUILD_ARGS=--no-cache" \
            "BUILD_FLAGS=--disable-oryx-cache" \
            "ORYX_DISABLE_CACHE=true" \
            "WEBSITES_ENABLE_APP_SERVICE_STORAGE=false" \
            "WEBSITE_RUN_FROM_PACKAGE=0"
        
        # Reinicio completo
        az webapp restart \
          --name ${{ env.AZURE_WEBAPP_NAME }} \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }}
        
        echo "‚è≥ Waiting for restart..."
        sleep 30
        
        echo "‚úÖ Phase 2 completed"

    - name: Validate critical files before deployment
      run: |
        echo "üìã Validating critical files in repository..."
        
        # Verificar archivos cr√≠ticos
        if [[ ! -f "app/actions/gemini_actions.py" ]]; then
          echo "‚ùå Missing: app/actions/gemini_actions.py"
          exit 1
        fi
        
        if [[ ! -f "app/core/action_mapper.py" ]]; then
          echo "‚ùå Missing: app/core/action_mapper.py"
          exit 1
        fi
        
        # Verificar que gemini_suggest_action est√© en action_mapper
        if grep -q "gemini_suggest_action" app/core/action_mapper.py; then
          echo "‚úÖ gemini_suggest_action found in action_mapper!"
        else
          echo "‚ùå gemini_suggest_action NOT found in action_mapper!"
          cat app/core/action_mapper.py
          exit 1
        fi
        
        # Mostrar estructura del proyecto
        echo "üìÇ Project structure:"
        find app -name "*.py" | head -20

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Deploy to Azure Web App (Force Fresh Build)
      uses: azure/webapps-deploy@v3
      with:
        app-name: ${{ env.AZURE_WEBAPP_NAME }}
        package: '.'
        clean: true # Esto limpia archivos antiguos

    - name: Post-deployment validation
      run: |
        echo "‚è≥ Waiting for complete deployment and startup..."
        sleep 180  # 3 minutos para deployment completo
        
        # Health check b√°sico
        echo "üîç Testing health endpoint..."
        for i in {1..5}; do
          if curl -f -s "https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net/health"; then
            echo "‚úÖ Health check passed"
            break
          else
            echo "‚è≥ Health check attempt $i failed, retrying..."
            sleep 30
          fi
        done
        
        # Test espec√≠fico de gemini_suggest_action
        echo "üß™ Testing gemini_suggest_action endpoint..."
        
        response=$(curl -s -w "%{http_code}" -X POST \
          "https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net/api/v1/dynamics" \
          -H "Content-Type: application/json" \
          -d '{"action": "gemini_suggest_action", "params": {"query": "test"}}')
        
        http_code="${response: -3}"
        body="${response%???}"
        
        echo "HTTP Code: $http_code"
        echo "Response Body: $body"
        
        if [[ "$http_code" == "400" ]] && echo "$body" | grep -q "no encontrada"; then
          echo "‚ùå CRITICAL: Oryx cache issue persists!"
          echo "üîç Checking deployed files..."
          
          # Verificar archivos desplegados
          PUBLISH_CREDS=$(az webapp deployment list-publishing-credentials \
            --name ${{ env.AZURE_WEBAPP_NAME }} \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }})
          
          PUBLISH_USER=$(echo $PUBLISH_CREDS | jq -r '.publishingUserName')
          PUBLISH_PASS=$(echo $PUBLISH_CREDS | jq -r '.publishingPassword')
          
          echo "Files in wwwroot:"
          curl -s "https://${{ env.AZURE_WEBAPP_NAME }}.scm.azurewebsites.net/api/vfs/site/wwwroot/" \
            -u "$PUBLISH_USER:$PUBLISH_PASS"
          
          exit 1
        else
          echo "‚úÖ SUCCESS: gemini_suggest_action is working correctly!"
        fi

    - name: Cleanup temporary settings
      if: always()
      run: |
        echo "üßπ Cleaning up temporary build settings..."
        
        # Remover configuraciones temporales pero mantener DEPLOYMENT_TIMESTAMP
        az webapp config appsettings delete \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --name ${{ env.AZURE_WEBAPP_NAME }} \
          --setting-names "SCM_BUILD_ARGS" "BUILD_FLAGS" "ORYX_DISABLE_CACHE" || true
        
        echo "‚úÖ Cleanup completed"